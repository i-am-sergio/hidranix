# Definimos una red interna para que los servicios se comuniquen
networks:
  app-network:
    driver: bridge

# Definimos los servicios (contenedores)
services:
  # Servicio de base de datos MySQL
  mysql-db:
    image: mysql:8.0
    container_name: mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_DATABASE:-hidranix}
      MYSQL_USER: ${DB_USER:-appuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-apppassword}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Servicio del backend Node.js
  backend:
    build:
      context: ./hidranix-server  # Cambiado a la carpeta correcta
      dockerfile: Dockerfile
    container_name: hidranix_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      mysql-db:
        condition: service_healthy
    volumes:
      - ./hidranix-server:/app
      - /app/node_modules
    networks:
      - app-network
    env_file:
      - ./hidranix-server/.env  
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio del frontend React
  frontend:
    build:
      context: ./hidranix-client  # Cambiado a la carpeta correcta
      dockerfile: Dockerfile
    container_name: hidranix_frontend
    restart: unless-stopped
    ports:
      - "5173:80"
    depends_on:
      - backend
    volumes:
      - ./hidranix-client:/app
      - /app/node_modules
    networks:
      - app-network
    env_file:
      - ./hidranix-client/.env  # Ruta corregida

# Vol√∫menes para persistencia de datos
volumes:
  mysql-data:
    driver: local